// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  name       String
  picture    String?
  role       Role
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  accounts    Account[]
  courses     Course[]     @relation("instructor_courses")
  enrollments Enrollment[]
  progress    Progress[]

  @@index([role])
  @@map("users")
}

model Account {
  id                  String          @id @default(uuid())
  provider            AccountProvider
  provider_account_id String          @unique

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, user_id])
  @@map("accounts")
}

model Course {
  id                     String       @id @default(uuid())
  title                  String
  description            String
  category               String
  logo_image             String
  access_duration_months Int
  status                 CourseStatus @default(draft)
  created_at             DateTime     @default(now())
  updated_at             DateTime     @updatedAt

  instructor_id String
  instructor    User   @relation("instructor_courses", fields: [instructor_id], references: [id])

  modules     Module[]
  enrollments Enrollment[]
  materials   CourseMaterial[]

  @@index([instructor_id])
  @@index([status])
  @@map("courses")
}

model Module {
  id          String @id @default(uuid())
  title       String
  description String
  order       Int

  course_id String
  course    Course @relation(fields: [course_id], references: [id], onDelete: Cascade)

  lessons Lesson[]

  @@map("modules")
}

model Lesson {
  id                String       @id @default(uuid())
  title             String
  description       String
  comment           String?
  order             Int
  provider_video_id String
  provider_type     ProviderType

  module_id String
  module    Module @relation(fields: [module_id], references: [id], onDelete: Cascade)

  progress Progress[]

  @@map("lessons")
}

model Enrollment {
  id                String   @id @default(uuid())
  access_expires_at DateTime
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  course_id String
  course    Course @relation(fields: [course_id], references: [id], onDelete: Cascade)

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, course_id])
  @@index([user_id])
  @@index([course_id])
  @@map("enrollments")
}

model Progress {
  id         String   @id @default(uuid())
  completed  Boolean  @default(false)
  rating     Int?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  lesson_id String
  lesson    Lesson @relation(fields: [lesson_id], references: [id], onDelete: Cascade)

  @@unique([user_id, lesson_id])
  @@index([user_id])
  @@index([lesson_id])
  @@map("progresses")
}

model CourseMaterial {
  id           String @id @default(uuid())
  title        String
  download_url String

  course_id String
  course    Course @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@map("course_materials")
}

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum AccountProvider {
  GMAIL
}

enum CourseStatus {
  draft
  pending
  approved
  rejected
}

enum ProviderType {
  youtube
  panda
}
